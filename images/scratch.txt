        public void readExcelFile(string pth)
        {
            Utility.WriteActivity("Reading: " + pth);
            facilities.Clear();
            //Create COM Objects. Create a COM object for everything that is referenced
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(@pth);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            Excel.Range xlRange = xlWorksheet.UsedRange;


            int rowCount = xlRange.Rows.Count;
            int colCount = prop.FAC_COLUMN; //xlRange.Columns.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based!!
            var strVal = "";
            for (int i = 1; i <= rowCount; i++)
            {
                //for (int j = 1; j <= colCount; j++)
                if (colCount == prop.FAC_COLUMN && i > 1)
                {
                    //new line
                    //if (j == 1)
                    //{
                    //    //Console.Write("\r\n");
                    //    //WriteActivity("");
                    //}

                    try
                    {
                       if (xlRange.Cells[i, colCount] != null && xlRange.Cells[i, colCount].Value2 != null)
                        {
                            var fac = new Fac();
                            //Console.Write(xlRange.Cells[i, j].Value2.ToString() + "\t");
                            strVal = xlRange.Cells[i, colCount].Value2.ToString();
                            if (strVal.Trim() != "")
                            {
                                var h = strVal.Split('-')[0]; //Hyphen split
                                var s = strVal.Split(' ')[0];//Space split
                                if (h.Length < 4)
                                {
                                    Utility.WriteActivity(h.Trim());
                                    fac = GetFacility(h.Trim());
                                    Utility.WriteActivity(fac.name);
                                }
                                else if (s.Length < 4)
                                {
                                    Utility.WriteActivity(s.Trim());
                                    fac = GetFacility(s.Trim());
                                    Utility.WriteActivity(fac.name);
                                }
                                else
                                {
                                    Utility.WriteActivity(strVal);
                                    fac.code = strVal;
                                    fac.name = "null";
                                    fac.email = "null";
                                    fac.fax = "null";
                                    Utility.WriteActivity(fac.name);
                                }
                                var valid = fac.name != "null" ? true : false;
                                var notify_type = strVal.Contains("(e") && valid ? "email" : "fax";
                                Facility facility = new Facility(fac.code, fac.name, " ", fac.fax, fac.email, notify_type, valid);
                                facilities.Add(facility);
                            }
                        }


                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }

                }
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("Code", typeof(string));
            dt.Columns.Add("Facility Name", typeof(string));
            dt.Columns.Add("Notify Type", typeof(string));
            dt.Columns.Add("Valid", typeof(string));
            foreach (var fac in facilities)
            {
                DataRow dr = dt.NewRow();
                dr["Code"] = fac.code;
                dr["Facility Name"] = fac.name;
                dr["Notify Type"] = fac.notify_type;
                dr["Valid"] = fac.valid_code.ToString();
                dt.Rows.Add(dr);
                if (!fac.valid_code)
                {
                    txtInfo.Text += fac.code + "\r\n";
                }
            }

            gvNotiifications.DataSource = dt;
            Process[] excelProcesses = Process.GetProcessesByName("excel");
            foreach (Process p in excelProcesses)
            {
                if (string.IsNullOrEmpty(p.MainWindowTitle)) // use MainWindowTitle to distinguish this excel process with other excel processes 
                {
                    p.Kill();
                }
            }
        }

           //Declare and instantiate a new process component.
            //Process process1;
            //process1 = new Process();


            ////Do not receive an event when the process exits.
            //process1.EnableRaisingEvents = false;


            ////The "/C" Tells Windows to Run The Command then Terminate 
            //string strCmdLine;
            ////strCmdLine = "/C regenresx " + textBox1.Text + " " + textBox2.Text;
            ////strCmdLine = "/C regenresx - S Rx - F C:\\Files\\OP.rpt - O C:\\Files\\OPP.pdf - E pdf - a \"Fac: DJ\"";
            //strCmdLine = "/C regenresx -S Rx -F C:\\Files\\OP.rpt -O C:\\Files\\OPP.pdf -E pdf -a \"Fac: DJ\"";
            ////CrystalReportsNinja.exe - S Rx - F C:\Files\OP.rpt - O C:\Files\OPP.pdf - E pdf - a "Fac:DJ"
            //System.Diagnostics.Process.Start("CrystalReportsNinja.exe", strCmdLine);
            //process1.Close();